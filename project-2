PROJECT : high-level demo project that incorporates Git, Docker, Kubernetes, Ansible, and Jenkins. This project will guide you through setting up a CI/CD pipeline for a simple web application.
 
 Project Overview
We'll create a basic web application using Python and Flask. The project will include:

Source Code Management with Git.
Containerization with Docker.
Orchestration with Kubernetes.
Configuration Management with Ansible.
Continuous Integration and Deployment (CI/CD) with Jenkins.
Step-by-Step Guide


1. Set Up the Web Application
Create a simple Flask application.

Create a directory for your project, e.g., flask-app, and inside it, create the following files:

app.py

#######

from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello, World!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)

##############

> 

requirements.txt

Flask==2.0.2


# Create a Dockerfile to containerize the application.

# Use the official Python image from the Docker Hub
FROM python:3.9-slim

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file into the container
COPY requirements.txt requirements.txt

# Install the dependencies
RUN pip install -r requirements.txt

# Copy the rest of the application code
COPY . .

# Specify the command to run the application
CMD ["python", "app.py"]

2. Set Up Kubernetes
Create a Kubernetes deployment and service to run your application.

kubernetes/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: <your-dockerhub-username>/flask-app:latest
        ports:
        - containerPort: 80

kubernetes/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  type: LoadBalancer
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80


3. Set Up Ansible
Create an Ansible playbook to deploy your application to Kubernetes.

ansible/deploy.yml

- hosts: localhost
  tasks:
    - name: Apply Kubernetes manifests
      k8s:
        state: present
        src: /path/to/kubernetes/deployment.yaml
        kubeconfig: /path/to/your/kubeconfig
      when: inventory_hostname == 'localhost'


4. Set Up Jenkins
Create a Jenkins pipeline to automate the build, test, and deploy process.

Jenkinsfile

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/your-repo/flask-app.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("flask-app:${env.BUILD_ID}")
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials-id') {
                        docker.image("flask-app:${env.BUILD_ID}").push('latest')
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh 'ansible-playbook -i localhost, ansible/deploy.yml'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

Configure Jenkins:

Install the required plugins: Git, Docker Pipeline, Kubernetes CLI, and Ansible.
Set up Docker Hub credentials in Jenkins.
Configure the Jenkins job to use the Jenkinsfile from your Git repository.

Summary
Git: Used for source code management.
Docker: Containerizes the web application.
Kubernetes: Manages the deployment and scaling of the application.
Ansible: Automates the deployment process to Kubernetes.
Jenkins: Automates the CI/CD pipeline, including building Docker images, pushing to Docker Hub, and deploying to Kubernetes.
This setup provides a complete CI/CD pipeline for a simple web application, showcasing how these technologies work together. You can extend this example by adding more features, such as testing, monitoring, or more complex deployment strategies.
